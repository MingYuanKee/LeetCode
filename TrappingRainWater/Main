class Solution:
    def trap(self, height: List[int]) -> int:
        length=len(height)
        if length<3:
            return 0
        else:
            maxLeft, maxRight,leftIndex,rightIndex = height[0],height[length-1],0,length-1
            
            waterTrapped=0
            while leftIndex < rightIndex:
            #key idea: trying to find the max left and and max right for each time the left or right index move 
                #(move the index with smaller value) and adding water for each new index it reaches.
                if maxLeft<=maxRight:
                    # Water is added by taking the min of max left/right and subtract from current block, if current block<min(maxLeft,maxRight)
                    if maxLeft>height[leftIndex]:
                        waterTrapped += maxLeft - height[leftIndex]
                    #update left index
                    leftIndex+=1
                    #if water at NEW left index is more than maxLeft, update maxLeft
                    if height[leftIndex]>maxLeft:
                        maxLeft=height[leftIndex]
                else:
                    if maxRight>height[rightIndex]:
                        waterTrapped += maxRight - height[rightIndex]
                    rightIndex-=1
                    if height[rightIndex]>maxRight:
                        maxRight=height[rightIndex]

            return waterTrapped
