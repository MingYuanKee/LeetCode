import bisect
import math
class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        potions.sort()
        m = len(potions)
        result = []
        for spell in spells:
            # Calculate the minimum potion strength required to reach success
            # Using ceiling division: required = ceil(success / spell)
            required = math.ceil(success / spell)# avoids float math
            # Find the leftmost index in potions with a value >= required
            index = bisect.bisect_left(potions, required)
            # Count of potions that are strong enough
            result.append(m - index)
        return result
